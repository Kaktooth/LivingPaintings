#version 460

#extension GL_EXT_nonuniform_qualifier : enable

layout(set = 1, binding = 0) uniform sampler2D texSampler[];
layout(binding = 2, r8) uniform writeonly image2D heightMapTexture;

const float gamma = 2.2f;
const vec3 luminance = vec3(0.2627f, 0.678f, 0.0593f);

const mat3 kernel = mat3(
	vec3( 1.0f, 2.0f, 1.0f), 
	vec3( 0.0f, 0.0f, 0.0f), 
	vec3( -1.0f, -2.0f, -1.0f)

);

const mat3 kernel2 = mat3(
	vec3( 1.0f, 0.0f, -1.0f), 
	vec3( 2.0f, 0.0f, -2.0f), 
	vec3( 1.0f, 0.0f, -1.0f)

);

vec3 convolve(float dilation, vec2 res, vec2 texCoord) {

	// Steps for all neighbours (horizontal, vertical, diagonal and inverted diagonal)
	vec2 stp = vec2(1. / res.x, 1. / res.y);
	stp += stp * dilation;
	// or we can divide step to make brushstrokes thinner
	//stp /= 2;
	vec2 stpHor = vec2(0.0f, stp.y);
	vec2 stpVert = vec2(stp.x, 0.0f);
  	vec2 stpDiag = vec2(stp.x, stp.y);
	vec2 stpDiagInv = vec2(stp.x, -stp.y);

	// Martix specified by rows and columns. All steps is calculated from the middle element (r1c1).
	// Calculating dot product with luminance weight to get grayscale image.
	
	float r0c0 = dot(texture(texSampler[0], texCoord - stpDiagInv).rgb, luminance);
	float r0c1 = dot(texture(texSampler[0], texCoord + stpHor).rgb, luminance);
	float r0c2 = dot(texture(texSampler[0], texCoord + stpDiag).rgb, luminance);
	float r1c0 = dot(texture(texSampler[0], texCoord - stpVert).rgb, luminance);
	float r1c1 = dot(texture(texSampler[0], texCoord).rgb, luminance);
	float r1c2 = dot(texture(texSampler[0], texCoord + stpVert).rgb, luminance);
	float r2c0 = dot(texture(texSampler[0], texCoord - stpDiag).rgb, luminance);
	float r2c1 = dot(texture(texSampler[0], texCoord - stpHor).rgb, luminance);
	float r2c2 = dot(texture(texSampler[0], texCoord + stpDiagInv).rgb, luminance);

	vec3 texColor = vec3(r0c0 * kernel[0].x + r0c1 * kernel[0].y + r0c2 * kernel[0].z 
	+ r1c0 * kernel[1].x + r1c1 * kernel[1].y + r1c2 * kernel[1].z
	+ r2c0 * kernel[2].x + r2c1 * kernel[2].y + r2c2 * kernel[2].z);

	texColor = texColor + vec3(r0c0 * kernel2[0].x + r0c1 * kernel2[0].y + r0c2 * kernel2[0].z 
	+ r1c0 * kernel2[1].x + r1c1 * kernel2[1].y + r1c2 * kernel2[1].z
	+ r2c0 * kernel2[2].x + r2c1 * kernel2[2].y + r2c2 * kernel2[2].z);

	texColor = pow(texColor, vec3(1.0f / gamma));
	return texColor;
}

void main() {

//* Height map creation
//	Calculating matrix convolution using sobel operator and creating height map.
	vec2 res = vec2(textureSize(texSampler[0], 0));
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	vec4 relativeCoord = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	relativeCoord.xy = vec2(float(texelCoord.x) / gl_NumWorkGroups.x, float(texelCoord.y) / gl_NumWorkGroups.y);

	vec3 edges = convolve(0.0f, res, relativeCoord.xy);
	vec4 heightMap = vec4(edges, 1.0);
	imageStore(heightMapTexture, texelCoord, heightMap);
}